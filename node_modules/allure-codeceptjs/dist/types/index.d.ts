/// <reference types="node" />
import type { ReporterConfig } from "allure-js-commons/sdk/reporter";
declare const allurePlugin: (config: ReporterConfig) => {
    addAttachment: (name: string, content: Buffer | string, contentType: string) => void;
    label: (name: string, value: string) => Promise<void>;
    link: (type: string, url: string, name?: string | undefined) => Promise<void>;
    parameter: (name: string, value: string, options?: {
        excluded?: boolean | undefined;
        mode?: "hidden" | "masked" | "default" | undefined;
    } | undefined) => Promise<void>;
    description: (markdown: string) => Promise<void>;
    descriptionHtml: (html: string) => Promise<void>;
    testCaseId: (id: string) => Promise<void>;
    historyId: (id: string) => Promise<void>;
    allureId: (id: string) => Promise<void>;
    displayName: (name: string) => Promise<void>;
    attachment: (name: string, content: string | Buffer, type: string) => Promise<void>;
    issue: (name: string, url: string) => Promise<void>;
    tms: (name: string, url: string) => Promise<void>;
    epic: (name: string) => Promise<void>;
    feature: (name: string) => Promise<void>;
    story: (name: string) => Promise<void>;
    suite: (name: string) => Promise<void>;
    parentSuite: (name: string) => Promise<void>;
    subSuite: (name: string) => Promise<void>;
    owner: (name: string) => Promise<void>;
    severity: (name: string) => Promise<void>;
    layer: (name: string) => Promise<void>;
    tag: (name: string) => Promise<void>;
    step: (name: string, body: () => Promise<void>) => Promise<void>;
};
export default allurePlugin;
