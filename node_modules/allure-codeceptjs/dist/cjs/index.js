"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _codeceptjs = require("codeceptjs");
var _allureJsCommons = require("allure-js-commons");
var _legacy = require("./legacy.js");
var _reporter = require("./reporter.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var allurePlugin = config => {
  var mocha = _codeceptjs.container.mocha();

  // At this point the configured reporter's constructor has been initialized and is available via the _reporter field.
  // See https://github.com/mochajs/mocha/blob/05097db4f2e0118f033978b8503aec36b1867c55/lib/mocha.js#L352
  // The field is not public but there is no other option to get the constructor; this is covered by tests in reporters.test.ts.
  // eslint-disable-next-line no-underscore-dangle
  var currentReporter = mocha._reporter;
  mocha.reporter(_reporter.AllureCodeceptJsReporter.prototype.constructor, _objectSpread(_objectSpread({}, config), currentReporter ? {
    extraReporters: [currentReporter, mocha.options.reporterOptions]
  } : {}));
  return _objectSpread(_objectSpread({}, _legacy.allureCodeceptJsLegacyApi), {}, {
    // this method is used by various bundled codeceptjs plugins, e.g. by screenshotOnFail
    addAttachment: (name, content, contentType) => {
      // wrap it in attachmentStep. Since we use Mocha, Runtime API is sync, so no awaits is fine
      (0, _allureJsCommons.attachment)(name, content, contentType);
    }
  });
};
var _default = exports.default = allurePlugin;
module.exports = exports.default;
//# sourceMappingURL=index.js.map