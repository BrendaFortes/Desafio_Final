"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allureCodeceptJsLegacyApi = void 0;
var allure = _interopRequireWildcard(require("allure-js-commons"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @deprecated please use api exported by "allure-js-commons" instead.
 */

/**
 * @deprecated please use api exported by "allure-js-commons" instead.
 */
var allureCodeceptJsLegacyApi = exports.allureCodeceptJsLegacyApi = {
  /**
   * @deprecated please use import { label } from "allure-js-commons" instead.
   */
  label: function label() {
    return Promise.resolve(allure.label(...arguments));
  },
  /**
   * @deprecated please use import { link } from "allure-js-commons" instead.
   */
  link: (type, url, name) => Promise.resolve(allure.link(url, name, type)),
  /**
   * @deprecated please use import { parameter } from "allure-js-commons" instead.
   */
  parameter: (name, value, options) => Promise.resolve(allure.parameter(name, value, options)),
  /**
   * @deprecated please use import { description } from "allure-js-commons" instead.
   */
  description: function description() {
    return Promise.resolve(allure.description(...arguments));
  },
  /**
   * @deprecated please use import { descriptionHtml } from "allure-js-commons" instead.
   */
  descriptionHtml: html => Promise.resolve(allure.descriptionHtml(html)),
  /**
   * @deprecated please use import { testCaseId } from "allure-js-commons" instead.
   */
  testCaseId: id => Promise.resolve(allure.testCaseId(id)),
  /**
   * @deprecated please use import { historyId } from "allure-js-commons" instead.
   */
  historyId: id => Promise.resolve(allure.historyId(id)),
  /**
   * @deprecated please use import { allureId } from "allure-js-commons" instead.
   */
  allureId: id => Promise.resolve(allure.allureId(id)),
  /**
   * @deprecated please use import { displayName } from "allure-js-commons" instead.
   */
  displayName: name => Promise.resolve(allure.displayName(name)),
  /**
   * @deprecated please use import { attachment } from "allure-js-commons" instead.
   */
  attachment: (name, content, type) => Promise.resolve(allure.attachment(name, content, {
    contentType: type
  })),
  /**
   * @deprecated please use import { issue } from "allure-js-commons" instead.
   */
  issue: (name, url) => Promise.resolve(allure.issue(url, name)),
  /**
   * @deprecated please use import { tms } from "allure-js-commons" instead.
   */
  tms: (name, url) => Promise.resolve(allure.tms(url, name)),
  /**
   * @deprecated please use import { epic } from "allure-js-commons" instead.
   */
  epic: name => Promise.resolve(allure.epic(name)),
  /**
   * @deprecated please use import { feature } from "allure-js-commons" instead.
   */
  feature: name => Promise.resolve(allure.feature(name)),
  /**
   * @deprecated please use import { story } from "allure-js-commons" instead.
   */
  story: name => Promise.resolve(allure.story(name)),
  /**
   * @deprecated please use import { suite } from "allure-js-commons" instead.
   */
  suite: name => Promise.resolve(allure.suite(name)),
  /**
   * @deprecated please use import { parentSuite } from "allure-js-commons" instead.
   */
  parentSuite: name => Promise.resolve(allure.parentSuite(name)),
  /**
   * @deprecated please use import { subSuite } from "allure-js-commons" instead.
   */
  subSuite: name => Promise.resolve(allure.subSuite(name)),
  /**
   * @deprecated please use import { owner } from "allure-js-commons" instead.
   */
  owner: name => Promise.resolve(allure.owner(name)),
  /**
   * @deprecated please use import { severity } from "allure-js-commons" instead.
   */
  severity: name => Promise.resolve(allure.severity(name)),
  /**
   * @deprecated please use import { layer } from "allure-js-commons" instead.
   */
  layer: name => Promise.resolve(allure.layer(name)),
  /**
   * @deprecated please use import { tag } from "allure-js-commons" instead.
   */
  tag: name => Promise.resolve(allure.tag(name)),
  /**
   * @deprecated please use import { step } from "allure-js-commons" instead.
   */
  step: (name, body) => Promise.resolve(allure.step(name, body))
};
//# sourceMappingURL=legacy.js.map