function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { event, recorder } from "codeceptjs";
import { env } from "node:process";
import { LabelName, Stage, Status } from "allure-js-commons";
import { getMessageAndTraceFromError, getStatusFromError, isMetadataTag, stripAnsi } from "allure-js-commons/sdk";
import AllureMochaReporter from "allure-mocha";
var MAX_META_STEP_NESTING = 10;
export class AllureCodeceptJsReporter extends AllureMochaReporter {
  constructor(runner, opts, isInWorker) {
    super(runner, opts, isInWorker);
    _defineProperty(this, "currentBddStep", void 0);
    _defineProperty(this, "metaStepStack", []);
    _defineProperty(this, "getFrameworkName", () => "codeceptjs");
    _defineProperty(this, "getWorkerId", () => undefined);
    this.registerEvents();
  }
  registerEvents() {
    // Test
    event.dispatcher.on(event.test.before, this.testStarted.bind(this));
    event.dispatcher.on(event.test.failed, this.testFailed.bind(this));
    event.dispatcher.on(event.test.finished, this.testFinished.bind(this));
    // Step
    event.dispatcher.on(event.step.started, this.stepStarted.bind(this));
    event.dispatcher.on(event.step.passed, this.stepPassed.bind(this));
    event.dispatcher.on(event.step.failed, this.stepFailed.bind(this));
    event.dispatcher.on(event.step.comment, this.stepComment.bind(this));
    event.dispatcher.on(event.bddStep.before, this.bddStepStarted.bind(this));
    event.dispatcher.on(event.bddStep.after, this.stepPassed.bind(this));
  }
  testStarted(test) {
    if (!this.currentTest) {
      return;
    }
    var tags = test.tags || [];
    var extraTagLabels = tags.filter(tag => tag && !isMetadataTag(tag)).map(tag => tag.startsWith("@") ? tag.substring(1) : tag).map(tag => tag.trim()).filter(tag => tag.length > 0).map(tag => ({
      name: LabelName.TAG,
      value: tag
    }));
    this.runtime.updateTest(this.currentTest, tr => {
      tr.labels.push(...extraTagLabels);
    });
  }
  testFailed(_, error) {
    var status = getStatusFromError({
      message: error.message
    });
    var statusDetails = getMessageAndTraceFromError(error);
    if (this.currentBddStep) {
      this.stopCurrentStep(result => {
        result.stage = Stage.FINISHED;
        result.status = Status.BROKEN;
        if (error) {
          result.status = status;
          result.statusDetails = _objectSpread({}, statusDetails);
        }
      });
    }
    this.currentBddStep = undefined;
    for (var {
      id
    } of this.metaStepStack) {
      this.runtime.updateStep(id, result => {
        result.stage = Stage.FINISHED;
        result.status = Status.BROKEN;
        if (error) {
          result.status = status;
          result.statusDetails = _objectSpread({}, statusDetails);
        }
      });
      this.runtime.stopStep(id);
    }
    this.metaStepStack = [];
  }
  testFinished() {
    if (this.currentBddStep) {
      this.runtime.updateStep(this.currentBddStep, result => {
        result.status = Status.PASSED;
        result.stage = Stage.FINISHED;
      });
      this.runtime.stopStep(this.currentBddStep);
    }
    this.currentBddStep = undefined;
    for (var {
      id
    } of this.metaStepStack) {
      this.runtime.updateStep(id, result => {
        result.status = Status.PASSED;
        result.stage = Stage.FINISHED;
      });
      this.runtime.stopStep(id);
    }
    this.metaStepStack = [];
  }
  stepStarted(step) {
    var _this$currentHook;
    var root = (_this$currentHook = this.currentHook) !== null && _this$currentHook !== void 0 ? _this$currentHook : this.currentTest;
    if (!root) {
      return;
    }
    var stepPath = [];
    var current = step.metaStep;
    while (current && !current.isBDD() && stepPath.length < MAX_META_STEP_NESTING) {
      var _current$toString;
      stepPath.push(stripAnsi((_current$toString = current.toString()) !== null && _current$toString !== void 0 ? _current$toString : "").trim());
      current = current.metaStep;
    }
    var index = 0;
    while (index < Math.min(this.metaStepStack.length, stepPath.length) && this.metaStepStack[index].name === stepPath[index]) {
      index++;
    }
    for (var i = index; i < this.metaStepStack.length; i++) {
      var id = this.metaStepStack[i].id;
      this.runtime.updateStep(id, result => {
        result.status = Status.PASSED;
        result.stage = Stage.FINISHED;
      });
      this.runtime.stopStep(id);
    }
    for (var _i = index; _i < stepPath.length; _i++) {
      var name = stepPath[_i];
      var _id = this.runtime.startStep(root, undefined, {
        name
      });
      if (_id) {
        this.metaStepStack.push({
          name,
          id: _id
        });
      }
    }
    this.runtime.startStep(root, undefined, {
      name: step.toString().trim()
    });
  }
  bddStepStarted(step) {
    var _this$currentHook2;
    var root = (_this$currentHook2 = this.currentHook) !== null && _this$currentHook2 !== void 0 ? _this$currentHook2 : this.currentTest;
    if (!root) {
      return;
    }
    this.currentBddStep = this.runtime.startStep(root, undefined, {
      name: step.keyword + step.text
    });
  }

  // according to the docs, codeceptjs supposed to report the error,
  // but actually it's never reported
  stepFailed(_, error) {
    this.stopCurrentStep(result => {
      result.stage = Stage.FINISHED;
      if (error) {
        result.status = getStatusFromError({
          message: error.message
        });
        result.statusDetails = getMessageAndTraceFromError(error);
      } else {
        result.status = env.TRY_TO === "true" ? Status.BROKEN : Status.FAILED;
      }
    });
  }
  stepComment() {
    this.stopCurrentStep(result => {
      result.status = Status.PASSED;
      result.stage = Stage.FINISHED;
    });
  }
  stepPassed() {
    this.stopCurrentStep(result => {
      result.status = Status.PASSED;
      result.stage = Stage.FINISHED;
    });
  }
  stopCurrentStep(updateFunc) {
    var _this$currentHook3;
    var root = (_this$currentHook3 = this.currentHook) !== null && _this$currentHook3 !== void 0 ? _this$currentHook3 : this.currentTest;
    var currentStep = root ? this.runtime.currentStep(root) : undefined;
    this.stopStepById(currentStep, updateFunc);
  }
  stopStepById(currentStep, updateFunc) {
    if (!currentStep) {
      return;
    }
    var promise = recorder.promise();
    // @ts-ignore
    if (promise) {
      promise.catch(err => {
        if (!err.message && typeof err.inspect === "function") {
          // AssertionFailedError doesn't set message attribute
          err.message = err.inspect();
        }
        if (err instanceof Error || err.constructor.name === "Error") {
          this.runtime.updateStep(currentStep, step => {
            step.status = getStatusFromError(err);
            step.statusDetails = _objectSpread(_objectSpread({}, step.statusDetails), getMessageAndTraceFromError(err));
          });
        }
        return Promise.reject(err);
      });
    }
    this.runtime.updateStep(currentStep, updateFunc);
    this.runtime.stopStep(currentStep);
  }
}
//# sourceMappingURL=reporter.js.map